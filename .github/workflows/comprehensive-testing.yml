name: Comprehensive Testing
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday at midnight

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test-suite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f pyproject.toml ]; then
            pip install -e .
          fi

      - name: Run Node.js tests
        run: |
          if [ -f package.json ]; then
            npm test
          fi

      - name: Run Python tests
        run: |
          if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
            python -m pytest tests/ -v --cov=src --cov-report=xml
          fi

      - name: Run integration tests
        run: |
          echo "## 🧪 Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test CLI functionality
          if [ -f package.json ]; then
            echo "### CLI Tests" >> $GITHUB_STEP_SUMMARY
            npm run test:cli 2>/dev/null || echo "No CLI tests available" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test API endpoints
          if [ -f package.json ]; then
            echo "### API Tests" >> $GITHUB_STEP_SUMMARY
            npm run test:api 2>/dev/null || echo "No API tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run performance tests
        run: |
          echo "## ⚡ Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f package.json ]; then
            echo "### Performance Test Results" >> $GITHUB_STEP_SUMMARY
            npm run test:performance 2>/dev/null || echo "No performance tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run security tests
        run: |
          echo "## 🔒 Security Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f package.json ]; then
            echo "### Security Test Results" >> $GITHUB_STEP_SUMMARY
            npm run test:security 2>/dev/null || echo "No security tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run accessibility tests
        run: |
          echo "## ♿ Accessibility Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f package.json ]; then
            echo "### Accessibility Test Results" >> $GITHUB_STEP_SUMMARY
            npm run test:a11y 2>/dev/null || echo "No accessibility tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run visual regression tests
        run: |
          echo "## 👁️ Visual Regression Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f package.json ]; then
            echo "### Visual Test Results" >> $GITHUB_STEP_SUMMARY
            npm run test:visual 2>/dev/null || echo "No visual tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run end-to-end tests
        run: |
          echo "## 🔄 End-to-End Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f package.json ]; then
            echo "### E2E Test Results" >> $GITHUB_STEP_SUMMARY
            npm run test:e2e 2>/dev/null || echo "No E2E tests available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test coverage report
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Check for test files
            const testFiles = files.filter(file => 
              file.filename.includes('test') || 
              file.filename.includes('spec') ||
              file.filename.includes('__tests__')
            );
            
            if (testFiles.length === 0 && files.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🧪 Test Coverage Analysis
                
                This PR doesn't include any test files. Consider adding tests for:
                
                ### New Features
                - Unit tests for new functions
                - Integration tests for new workflows
                - End-to-end tests for new user flows
                
                ### Bug Fixes
                - Regression tests to prevent future issues
                - Edge case tests for the fixed bug
                
                ### Test Types to Consider
                - **Unit Tests:** Test individual functions
                - **Integration Tests:** Test component interactions
                - **E2E Tests:** Test complete user workflows
                - **Performance Tests:** Test response times
                - **Security Tests:** Test for vulnerabilities
                
                ### Resources
                - [Testing Guide](https://github.com/AnLoMinus/RepoCraft/blob/main/docs/STYLE_GUIDE.md#testing)
                - [Jest Documentation](https://jestjs.io/docs/getting-started)
                - [Pytest Documentation](https://docs.pytest.org/)
                
                ### Test Checklist
                - [ ] Unit tests for new functions
                - [ ] Integration tests for new features
                - [ ] Regression tests for bug fixes
                - [ ] Performance tests if applicable
                - [ ] Security tests if applicable
                
                Adding tests helps ensure code quality and prevents regressions! 🚀`
              });
            }

      - name: Test results summary
        run: |
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          test_count=$(find . -name "*.test.*" -o -name "*.spec.*" | wc -l)
          echo "Test files found: $test_count" >> $GITHUB_STEP_SUMMARY
          
          # Check test coverage
          if [ -f coverage.xml ]; then
            echo "Coverage report generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for test failures
          if [ -f test-results.txt ]; then
            failures=$(grep -c "FAIL" test-results.txt 2>/dev/null || echo "0")
            echo "Test failures: $failures" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            test-results.txt
            coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 20 && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-reporting:
    runs-on: ubuntu-latest
    needs: test-suite
    if: always()
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Generate test report
        uses: actions/github-script@v7
        with:
          script: |
            // Generate comprehensive test report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🧪 Test Report - ${new Date().toLocaleDateString()}`,
              body: `## 🧪 Comprehensive Test Report
              
              **Date:** ${new Date().toLocaleDateString()}
              **Time:** ${new Date().toLocaleTimeString()}
              **Status:** ${context.payload.workflow_run.conclusion === 'success' ? '✅ All tests passed' : '❌ Some tests failed'}
              
              ### 📊 Test Summary
              - **Node.js Versions:** 18, 20, 21
              - **Python Versions:** 3.8, 3.9, 3.10, 3.11
              - **Test Types:** Unit, Integration, Performance, Security, Accessibility, Visual, E2E
              
              ### 🎯 Test Coverage
              - **Unit Tests:** [See individual job results]
              - **Integration Tests:** [See individual job results]
              - **Performance Tests:** [See individual job results]
              - **Security Tests:** [See individual job results]
              - **Accessibility Tests:** [See individual job results]
              - **Visual Tests:** [See individual job results]
              - **E2E Tests:** [See individual job results]
              
              ### 📈 Trends
              - **Test Success Rate:** [To be calculated]
              - **Coverage Trend:** [To be tracked]
              - **Performance Trend:** [To be tracked]
              - **Security Trend:** [To be tracked]
              
              ### 🎯 Goals
              - [ ] Maintain 90%+ test coverage
              - [ ] Keep test execution time under 10 minutes
              - [ ] Ensure all security tests pass
              - [ ] Maintain accessibility compliance
              - [ ] Keep performance within acceptable limits
              
              ### 💡 Recommendations
              - [ ] Add more unit tests for edge cases
              - [ ] Improve integration test coverage
              - [ ] Add more performance benchmarks
              - [ ] Enhance security test coverage
              - [ ] Add more accessibility tests
              
              ### 🔗 Resources
              - [Test Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)
              - [Coverage Report](https://codecov.io/gh/${context.repo.owner}/${context.repo.repo})
              - [Testing Guide](https://github.com/AnLoMinus/RepoCraft/blob/main/docs/STYLE_GUIDE.md#testing)
              
              ---
              **This report is automatically generated after each test run.**`,
              category: "General"
            });

      - name: Test failure analysis
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // Analyze test failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🧪 Test Failure Analysis',
              body: `## 🧪 Test Failure Analysis
              
              Some tests have failed in the latest run. Here's the analysis:
              
              ### 🔍 Failure Analysis
              - **Failed Jobs:** [See workflow run]
              - **Failure Types:** [To be analyzed]
              - **Affected Components:** [To be identified]
              
              ### 🚨 Critical Issues
              - [ ] Unit test failures
              - [ ] Integration test failures
              - [ ] Performance test failures
              - [ ] Security test failures
              
              ### 🔧 Recommended Actions
              1. **Review** the failed test logs
              2. **Identify** the root cause
              3. **Fix** the failing tests
              4. **Re-run** the test suite
              5. **Verify** all tests pass
              
              ### 📋 Test Checklist
              - [ ] All unit tests pass
              - [ ] All integration tests pass
              - [ ] All performance tests pass
              - [ ] All security tests pass
              - [ ] All accessibility tests pass
              - [ ] All visual tests pass
              - [ ] All E2E tests pass
              
              ### 🔗 Resources
              - [Failed Workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)
              - [Test Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)
              - [Testing Guide](https://github.com/AnLoMinus/RepoCraft/blob/main/docs/STYLE_GUIDE.md#testing)
              
              ---
              **This issue was automatically created due to test failures.**`,
              labels: ['tests', 'failure', 'automated']
            });
